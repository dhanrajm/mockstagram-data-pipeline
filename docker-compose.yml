services:
  scheduler:
    container_name: scheduler
    build:
      context: .
      dockerfile: apps/scheduler/Dockerfile
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:29092
      - METRICS_PORT=8080
      - SERVICE_NAME=scheduler
      - SERVICE_VERSION=1.0.0
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
    ports:
      - "8081:8080"
    depends_on:
      kafka:
        condition: service_healthy
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "localhost:24224"
        tag: "mockstagram.scheduler"
    networks:
      - default

  fetcher:
    container_name: fetcher
    build:
      context: .
      dockerfile: apps/fetcher/Dockerfile
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:29092
      - METRICS_PORT=8080
      - MOCKSTAGRAM_API_BASE_URL=http://localhost:3500/api/v1
      - SERVICE_NAME=fetcher
      - SERVICE_VERSION=1.0.0
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
      - INFLUENCER_FETCH_TASKS_TOPIC=influencer_fetch_tasks
      - FETCHER_RESULT_TOPIC=fetcher_results
      - FETCHER_DLQ_TOPIC=fetcher_dlq
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_healthy
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "localhost:24224"
        tag: "mockstagram.fetcher"
    networks:
      - default

  result-handler:
    container_name: result-handler
    build:
      context: .
      dockerfile: apps/result-handler/Dockerfile
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:29092
      - METRICS_PORT=8080
      - PGHOST=timescaledb
      - PGPORT=5432
      - PGUSER=mockstagram
      - PGPASSWORD=mockstagram
      - PGDATABASE=mockstagram
      - SERVICE_NAME=result-handler
      - SERVICE_VERSION=1.0.0
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
      - FETCHER_RESULT_TOPIC=fetcher_results
      - RESULT_HANDLER_DLQ_TOPIC=result_handler_dlq
    ports:
      - "8083:8080"
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "localhost:24224"
        tag: "mockstagram.result-handler"
    networks:
      - default

  # supporting services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      kafka:
        condition: service_healthy

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      POSTGRES_DB: mockstagram
      POSTGRES_USER: mockstagram
      POSTGRES_PASSWORD: mockstagram
      TZ: UTC # Sets the container's operating system timezone to UTC
    ports:
      - "6432:5432"
    command: >
      postgres
      -c timezone=UTC
      -c log_timezone=UTC
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./volumes/timescaledb/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mockstagram"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./volumes/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test:
        ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    healthcheck:
      test:
        ["CMD", "wget", "-q", "--spider", "http://localhost:16686/api/services"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  fluentd:
    build:
      context: ./volumes/fluentd
      dockerfile: Dockerfile
    volumes:
      - ./volumes/fluentd:/fluentd/etc
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - default
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:24220/api/plugins.json"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  elasticsearch_data:
  grafana_data:
  timescaledb_data:
  prometheus_data:
